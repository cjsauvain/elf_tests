							/******************************************************************/
							/***						STEPS								***/
							/******************************************************************/

- 128 bits input represented as 4x4 (four 32-bytes words) matrix

- 128 bits key is 10 rounds + 1 round (initial round)

- Construct state matrix (input array into two-dimensional array representing the matrix s)
	-> s[r, c] = in[r + 4c] for 0 <= r < 4 and 0 <= c < Nb
																	*********************************************	
- Deconstruct state matrix (matrix s into output array)             *	-s is the matrix,						*
	-> out[r + 4c] = s[r, c] for 0 <= r < 4 and 0 <= c < Nb         *	-r is the row index,					*
															        *	-c is the column index,					*
															        *	-Nb is the number of rows				*
															        *		(input block length divided by 32)	*
															        *********************************************	


*************************************************************************************
*																					*
*	Cipher(byte input[4*Nb], byte output[4*Nb], word w[Nb*(Nr+1)])					*
*	begin																			*
*		byte state[4,Nb]															*
*		state = input																*
*																					*
*		AddRoundKey(state, w[0, Nb-1]) 							// See Sec. 5.1.4   *
*																					*
*		for round = 1 step 1 to Nrâ€“1												*
*			SubBytes(state) 									// See Sec. 5.1.1	*
*			ShiftRows(state) 									// See Sec. 5.1.2	*
*			MixColumns(state) 									// See Sec. 5.1.3	*
*			AddRoundKey(state, w[round*Nb, (round+1)*Nb-1])							*
*		end for																		*
*																					*
*		SubBytes(state)																*
*		ShiftRows(state)															*
*		AddRoundKey(state, w[Nr*Nb, (Nr+1)*Nb-1])									*
*		output = state																*
*	end																				*
*																					*
*************************************************************************************
